{"version":3,"sources":["services/local-storage.service.ts","services/weather-service.ts","services/util.service.ts","components/FavoriteCityPreview.tsx","components/FavoritesHeader.tsx","services/city-service.ts","pages/Favorites.tsx","components/CitySearch.tsx","components/context/TodayWeatherContext.ts","components/FiveDayForecast.tsx","components/Header.tsx","components/SearchResults.tsx","components/TodayWeather.tsx","components/Screen.tsx","pages/WeatherApp.tsx","App.tsx","index.tsx"],"names":["localStorageService","load","key","obj","localStorage","getItem","JSON","parse","save","setItem","stringify","remove","removeItem","weatherService","getCurrentWeather","getFiveDayForecast","apiKey","process","currentWeatherKey","forecastKey","cityKey","a","currentWeatherCache","Date","now","createdAt","data","axios","get","currentWeather","weatherObj","forecastCache","foreCast","foreCastObj","DailyForecasts","utilService","debounce","func","timeout","timer","args","clearTimeout","setTimeout","getTime","timeStamp","date","getHours","getMinutes","_getDay","getDay","getDate","month","_getMonth","getMonth","getFullYear","day","FavoriteCityPreview","city","removeFromFavorites","useState","cityWeather","setCityWeather","history","useHistory","useEffect","getCityWeather","Key","className","onClick","push","event","stopPropagation","City","LocalObservationDateTime","src","WeatherIcon","alt","WeatherText","Temperature","Metric","Value","toFixed","FavoritesHeader","window","innerWidth","isMobile","setIsMobile","updateState","windowWidth","addEventListener","removeEventListener","to","cityService","getCitiesNames","getCityByGeolocation","toggleCityFavorite","favoriteCities","favoriteCitiesKey","idx","findIndex","favCity","splice","isCityFavorite","some","getFavoriteCities","getCityByKey","citiesKey","searchTxt","citiesCache","cities","citiesMapObj","map","LocalizedName","Country","lat","lng","Promise","resolve","Favorites","setFavoriteCities","updatedFavoriteCities","CitySearch","onSetCitySearch","inputRef","onDebounce","txt","ref","type","placeholder","onChange","target","value","TodayWeatherContext","createContext","FiveDayForecast","setForecast","todayWeather","useContext","getForeCast","IsDayTime","Day","Icon","Night","IconPhrase","Minimum","Maximum","EpochDate","Header","isMobileMenu","toggleMobileMenu","currentCity","isFavorite","setFavorite","onToggleFavorite","prevState","SearchResults","setCurrentCity","clearSearch","length","onCityClick","TodayWeather","setTodayWeather","Screen","isOpen","exitScreen","WeatherApp","setCities","setMobileMenu","useRef","useParams","citykey","Object","keys","navigator","geolocation","getCurrentPosition","geoLocation","userCoords","coords","latitude","longitude","getCities","action","Provider","current","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a8aea3.chunk.js","sourcesContent":["export const localStorageService = {\r\n    load,\r\n    save,\r\n    remove\r\n}\r\n\r\nfunction load(key: string): any {\r\n    const obj: any = localStorage.getItem(key)\r\n    return JSON.parse(obj)\r\n}\r\n\r\nfunction save(key: string, obj: any) {\r\n    localStorage.setItem(key, JSON.stringify(obj))\r\n}\r\n\r\nfunction remove(key: string) {\r\n    localStorage.removeItem(key)\r\n}","import axios from \"axios\"\r\nimport { ICurrentWeatherProps, IForecastProps } from \"../interfaces/IWeather\"\r\nimport { localStorageService } from \"./local-storage.service\"\r\n\r\nexport const weatherService = {\r\n    getCurrentWeather,\r\n    getFiveDayForecast\r\n}\r\n\r\ninterface IWeather {\r\n    [key: string]:{\r\n        createdAt: number,\r\n        data: ICurrentWeatherProps\r\n    }\r\n}\r\n\r\ninterface IForecase {\r\n    [key: string]: {\r\n        createdAt: number,\r\n        data: IForecastProps\r\n    }\r\n}\r\n\r\n\r\nconst apiKey = process.env.REACT_APP_WEATHER_API\r\nconst currentWeatherKey = 'currentWeather'\r\nconst forecastKey = 'foreCast'\r\n\r\n\r\nasync function getCurrentWeather(cityKey: string) {\r\n    const currentWeatherCache: IWeather = localStorageService.load(currentWeatherKey) || {}\r\n    // Fetch Weather from cache (If exist)\r\n    if (currentWeatherCache[cityKey]) {\r\n        if(Date.now() -  currentWeatherCache[cityKey].createdAt < 1000 * 60 * 30){\r\n            return currentWeatherCache[cityKey].data\r\n        }\r\n    }\r\n\r\n    // Fetch Weather from API\r\n    try {\r\n        const currentWeather = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=${apiKey}`)\r\n        const weatherObj = currentWeather.data[0]\r\n\r\n        currentWeatherCache[cityKey] = {\r\n            data: weatherObj,\r\n            createdAt: Date.now()\r\n        }\r\n\r\n        localStorageService.save(currentWeatherKey, currentWeatherCache)\r\n\r\n        return weatherObj\r\n    } catch (err) {\r\n    }\r\n}\r\n\r\nasync function getFiveDayForecast(cityKey: string) {\r\n    const forecastCache: IForecase = localStorageService.load(forecastKey) || []\r\n    // Fetch Forecast from cache (If exist)\r\n    if(forecastCache[cityKey]){\r\n        if(Date.now() - forecastCache[cityKey].createdAt < 1000 * 60 * 30){\r\n            return forecastCache[cityKey].data\r\n        }\r\n    }\r\n    \r\n    // Fetch Forecast from API\r\n    try{\r\n        const foreCast = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${apiKey}&metric=${true}`)\r\n        const foreCastObj = foreCast.data.DailyForecasts\r\n\r\n        forecastCache[cityKey] = {\r\n            data: foreCastObj,\r\n            createdAt: Date.now()\r\n        }\r\n\r\n        localStorageService.save(forecastKey, forecastCache)\r\n\r\n        return foreCastObj\r\n\r\n    } catch(err){\r\n    }\r\n}\r\n","export const utilService = {\r\n    debounce,\r\n    getTime,\r\n    getDay\r\n}\r\n\r\nfunction debounce<Params extends any[]>(func: (...args: Params) => any, timeout: number,): (...args: Params) => void {\r\n    let timer: NodeJS.Timeout\r\n    \r\n    return (...args: Params) => {\r\n        clearTimeout(timer)\r\n        timer = setTimeout(() => {\r\n            func(...args)\r\n        }, timeout)\r\n    }\r\n}\r\n\r\nfunction getTime(timeStamp: string): string{\r\n    const date = new Date(timeStamp)\r\n\r\n    return `${date.getHours()}:${date.getMinutes()} • ${_getDay(date.getDay())} ${date.getDate()} ${_getMonth(date.getMonth())} ${date.getFullYear()}`\r\n}\r\n\r\nfunction getDay(timeStamp: string): string{\r\n    const date = new Date(timeStamp)\r\n\r\n    return _getDay(date.getDay())\r\n}\r\n\r\n\r\nfunction _getDay(day: number): string{\r\n    switch(day){\r\n        case 0:\r\n            return 'Sun'\r\n        case 1:\r\n            return 'Mon'\r\n        case 2:\r\n            return 'Tue'\r\n        case 3:\r\n            return 'Wed'\r\n        case 4:\r\n            return 'Thu'\r\n        case 5:\r\n            return 'Fri'\r\n        case 6:\r\n            return 'Sat'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nfunction _getMonth(month: number): string{\r\n    switch(month){\r\n        case 0:\r\n            return 'Jan'\r\n        case 1:\r\n            return 'Feb'\r\n        case 2:\r\n            return 'Mar'\r\n        case 3:\r\n            return 'Apr'\r\n        case 4:\r\n            return 'May'\r\n        case 5:\r\n            return 'Jun'\r\n        case 6:\r\n            return 'Jul'\r\n        case 7:\r\n            return 'Aug'\r\n        case 8:\r\n            return 'Sep'\r\n        case 9:\r\n            return 'Oct'\r\n        case 10:\r\n            return 'Nov'\r\n        case 11:\r\n            return 'Dec'\r\n        default:\r\n            return ''\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { weatherService } from '../services/weather-service'\r\nimport { ICurrentWeatherProps } from '../interfaces/IWeather'\r\nimport { ICityProps } from '../interfaces/ICity'\r\nimport { utilService } from '../services/util.service'\r\nimport { TiDelete } from 'react-icons/ti'\r\nimport { useHistory } from 'react-router'\r\n\r\ninterface IFavoriteCityPreview {\r\n    city: ICityProps;\r\n    removeFromFavorites: (city: ICityProps) => void\r\n}\r\n\r\nexport const FavoriteCityPreview = ({city, removeFromFavorites}: IFavoriteCityPreview) => {\r\n\r\n    const [cityWeather, setCityWeather] = useState<ICurrentWeatherProps | null>(null)\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n        const getCityWeather = async () => {\r\n            const cityWeather = await weatherService.getCurrentWeather(city.Key)\r\n            setCityWeather(cityWeather)\r\n        }\r\n\r\n        getCityWeather()\r\n    }, [city])\r\n\r\n    const goToCity = () => {\r\n        history.push('/city/' + city.Key)\r\n    }\r\n  \r\n\r\n    if(!cityWeather) return null\r\n\r\n    return (\r\n        <div className=\"favorite-city-preview\" onClick={goToCity}>\r\n            <div className=\"remove-from-favorite-btn\">\r\n                <TiDelete onClick={(event) => {event.stopPropagation(); removeFromFavorites(city)}}/>\r\n            </div>\r\n            <div className=\"city-and-time\">\r\n                <div className=\"city-name\">\r\n                    {city.City}\r\n                </div>\r\n                <div className=\"city-time\">\r\n                    {utilService.getTime(cityWeather.LocalObservationDateTime)}\r\n                </div>\r\n            </div>\r\n            <img src={`https://www.accuweather.com/images/weathericons/${cityWeather.WeatherIcon}.svg`} alt={cityWeather.WeatherText} />\r\n            <h4 className=\"weather-text\">{cityWeather.WeatherText}</h4>\r\n            <h4 className=\"weather-temperature\">{cityWeather.Temperature.Metric.Value.toFixed(0)}°</h4>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { AiFillHeart } from 'react-icons/ai'\r\nimport { FaHome } from 'react-icons/fa'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const FavoritesHeader = () => {\r\n\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth < 850 ? true : false)\r\n\r\n    const updateState = () => {\r\n        const windowWidth = window.innerWidth\r\n\r\n        if(windowWidth < 850){\r\n            setIsMobile(true)\r\n        } else if(windowWidth > 850){\r\n            setIsMobile(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', updateState)\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', updateState)\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"header\">\r\n        <div className=\"header-routing\">\r\n            {isMobile ? \r\n            <>\r\n                <Link to='/'>\r\n                    <FaHome/>\r\n                </Link>\r\n                \r\n                <Link to='/favorites'>\r\n                    <AiFillHeart/>\r\n                </Link>\r\n            </>\r\n            :\r\n            <>\r\n                <Link to='/'>\r\n                    <h2>WeatherApp</h2>\r\n                </Link>\r\n                <Link to='/favorites'>\r\n                    <h2>Favorites</h2>\r\n                </Link>\r\n            </>\r\n            }\r\n        </div>\r\n       \r\n    </div>\r\n    )\r\n}\r\n","import axios from \"axios\"\r\nimport { ICityProps } from '../interfaces/ICity' \r\nimport { localStorageService } from \"./local-storage.service\"\r\n\r\nexport const cityService = {\r\n    getCitiesNames,\r\n    getCityByGeolocation,\r\n    toggleCityFavorite,\r\n    isCityFavorite,\r\n    getFavoriteCities,\r\n    getCityByKey\r\n}\r\n\r\ninterface ICity {\r\n    Key: string;\r\n    LocalizedName: string;\r\n    Country: {\r\n        LocalizedName: string\r\n    };\r\n}\r\n\r\ninterface ICityCache {\r\n    [key: string]: {\r\n        createdAt: number,\r\n        data: ICity[]\r\n    }\r\n}\r\n\r\nconst apiKey = process.env.REACT_APP_WEATHER_API\r\nconst citiesKey = 'cities'\r\nconst favoriteCitiesKey = 'favoriteCities'\r\n\r\nasync function getCitiesNames(searchTxt: string) {\r\n    const citiesCache: ICityCache = localStorageService.load(citiesKey) || {}\r\n\r\n    // Fetch Cities from cache (If exist)\r\n    if (citiesCache[searchTxt]) {\r\n        return citiesCache[searchTxt].data\r\n    }\r\n\r\n    // Fetch Cities from API\r\n    try {\r\n        const cities = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${searchTxt}`)\r\n        const citiesMapObj = cities.data.map((city: ICity) => {\r\n            return {\r\n                Key: city.Key,\r\n                City: city.LocalizedName,\r\n                Country: city.Country.LocalizedName\r\n            }\r\n        })\r\n        \r\n        citiesCache[searchTxt] = {\r\n            data: citiesMapObj,\r\n            createdAt: Date.now()\r\n        }\r\n        \r\n        localStorageService.save(citiesKey, citiesCache)\r\n        \r\n        return citiesMapObj\r\n    } catch(err) {\r\n    }\r\n}\r\n\r\ninterface ICoords{\r\n    lat: number;\r\n    lng: number;\r\n}\r\n\r\nasync function getCityByGeolocation({lat, lng}: ICoords = {lat: -1, lng: -1}): Promise<ICityProps> {\r\n    try{ \r\n\r\n        if(lat === -1 && lng === -1){\r\n            return Promise.resolve({\r\n                Key: \"215854\",\r\n                City: \"Tel Aviv\",\r\n                Country: \"Israel\"\r\n            })\r\n        }\r\n\r\n        const city = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${apiKey}&q=${lat}%2C%20${lng}`)\r\n\r\n        return {\r\n            Key: city.data.Key,\r\n            City: city.data.LocalizedName,\r\n            Country: city.data.Country.LocalizedName\r\n        }\r\n\r\n        // Dev only:\r\n\r\n        // return Promise.resolve({\r\n        //     Key: \"215854\",\r\n        //     City: \"Tel Aviv\",\r\n        //     Country: \"Israel\"\r\n        // })\r\n\r\n    } catch(err) {\r\n        return Promise.resolve({\r\n            Key: \"215854\",\r\n            City: \"Tel Aviv\",\r\n            Country: \"Israel\"\r\n        })\r\n    }\r\n\r\n}\r\n\r\nasync function getCityByKey(cityKey: string){\r\n    const citiesCache = localStorageService.load(citiesKey) || []\r\n\r\n    // Try fetching from cache\r\n    for(const key in citiesCache){\r\n        const idx = citiesCache[key].data.findIndex((city: ICity) => city.Key === cityKey)\r\n        if(idx !== -1){\r\n            return Promise.resolve(citiesCache[key].data[idx])\r\n        }\r\n    }\r\n\r\n    try{\r\n        const city = await axios.get(`https://dataservice.accuweather.com/locations/v1/${cityKey}?apikey=${apiKey}`)\r\n        return city\r\n    } catch(err){\r\n    }\r\n}\r\n\r\nfunction toggleCityFavorite(city: ICityProps){\r\n    const favoriteCities: ICityProps[] = localStorageService.load(favoriteCitiesKey) || []\r\n    \r\n    const idx = favoriteCities.findIndex((favCity: ICityProps): boolean => favCity.Key === city.Key)\r\n    \r\n    if(idx !== -1){\r\n      favoriteCities.splice(idx,1)\r\n    } else {\r\n      favoriteCities.push(city)\r\n    }\r\n    \r\n    localStorageService.save(favoriteCitiesKey, favoriteCities)\r\n    return favoriteCities\r\n  }\r\n  \r\n  function isCityFavorite(cityKey: string) {\r\n    const favoriteCities: ICityProps[] = localStorageService.load(favoriteCitiesKey) || []\r\n  \r\n    return favoriteCities.some(favCity => favCity.Key === cityKey)\r\n  }\r\n  \r\n  function getFavoriteCities() {\r\n    return localStorageService.load(favoriteCitiesKey) || []\r\n  }\r\n  ","import React, { useEffect, useState } from 'react'\r\nimport { ICityProps } from '../interfaces/ICity'\r\nimport { FavoriteCityPreview } from '../components/FavoriteCityPreview'\r\nimport { FavoritesHeader } from '../components/FavoritesHeader'\r\nimport { cityService } from '../services/city-service'\r\n\r\n\r\nexport const Favorites = () => {\r\n\r\n    const [favoriteCities, setFavoriteCities] = useState<ICityProps[]>([])\r\n\r\n    useEffect(() => {\r\n        const favoriteCities = cityService.getFavoriteCities()\r\n        setFavoriteCities(favoriteCities)\r\n    }, [])\r\n    \r\n    const removeFromFavorites = (city: ICityProps) => {\r\n        const updatedFavoriteCities = cityService.toggleCityFavorite(city)\r\n        setFavoriteCities(updatedFavoriteCities)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"main-app\">\r\n                <FavoritesHeader/>\r\n                <div className=\"favorite-cities-list\">\r\n                    {favoriteCities.map(city => <FavoriteCityPreview key={'favorite-' + city.Key} city={city} removeFromFavorites={removeFromFavorites}/>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { RefObject } from 'react'\r\nimport { utilService } from '../services/util.service'\r\n\r\n\r\ninterface IProps {\r\n    onSetCitySearch: (searchTxt: string) => void;\r\n    inputRef: RefObject<HTMLInputElement>;\r\n}\r\n\r\nexport const CitySearch = ({onSetCitySearch, inputRef}: IProps) => {\r\n\r\n    const debounceTxt = (txt: string) => {\r\n        onSetCitySearch(txt)\r\n    }\r\n\r\n    const onDebounce = utilService.debounce(debounceTxt, 500);\r\n\r\n    const onInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        onDebounce(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"city-search\">\r\n            <input ref={inputRef} className=\"city-input\" type=\"text\" placeholder=\"Search\" onChange={onInput}/>\r\n        </div>\r\n    )\r\n}\r\n","import { createContext } from \"react\";\r\nimport { ICityProps } from \"../../interfaces/ICity\";\r\nimport { ICurrentWeatherProps } from \"../../interfaces/IWeather\";\r\n\r\nexport const TodayWeatherContext = createContext<any>(null);\r\n\r\nexport interface IWeatherContext {\r\n    todayWeather: ICurrentWeatherProps\r\n    setTodayWeather: React.Dispatch<React.SetStateAction<ICurrentWeatherProps | null>>\r\n    currentCity: ICityProps | null;\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport { ICityProps } from '../interfaces/ICity'\r\nimport { weatherService } from '../services/weather-service'\r\nimport { IForecastProps } from '../interfaces/IWeather'\r\nimport { utilService } from '../services/util.service'\r\nimport { IWeatherContext, TodayWeatherContext } from '../components/context/TodayWeatherContext'\r\n\r\nexport const FiveDayForecast = ({city}: { city: ICityProps | null }) => {\r\n\r\n    const [foreCast, setForecast] = useState<IForecastProps[] | null>(null)\r\n    const { todayWeather } = useContext<IWeatherContext>(TodayWeatherContext)\r\n\r\n    useEffect(() => {\r\n        const getForeCast = async (cityKey: string) => {\r\n            const foreCast: IForecastProps[] = await weatherService.getFiveDayForecast(cityKey)\r\n            setForecast(foreCast)\r\n        }\r\n\r\n        if(city){\r\n            getForeCast(city.Key)\r\n        }\r\n    }, [city])\r\n\r\n    if(!city || !foreCast) return null\r\n\r\n    return (\r\n        <div className=\"five-day-forecast\">\r\n            {foreCast.map(day => {\r\n                return <div key={city.Key+day.EpochDate} className=\"forecast-day\">\r\n                           <h4>{utilService.getDay(day.Date)}</h4>\r\n                           <img src={`https://www.accuweather.com/images/weathericons/${todayWeather.IsDayTime ? day.Day.Icon : day.Night.Icon}.svg`} \r\n                                alt={todayWeather.IsDayTime ? day.Day.IconPhrase : day.Night.IconPhrase} />\r\n                            <h3>{todayWeather.IsDayTime ? day.Day.IconPhrase : day.Night.IconPhrase}</h3>\r\n                            <h3>{`${day.Temperature.Minimum.Value.toFixed(0)}° / ${day.Temperature.Maximum.Value.toFixed(0)}°`}</h3>\r\n                       </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { GiHamburgerMenu } from 'react-icons/gi'\r\nimport { AiFillHeart, AiOutlineHeart } from 'react-icons/ai'\r\nimport { FaHome } from 'react-icons/fa'\r\nimport { IWeatherContext, TodayWeatherContext } from '../components/context/TodayWeatherContext'\r\nimport { weatherService } from '../services/weather-service'\r\nimport { Link } from 'react-router-dom'\r\nimport { cityService } from '../services/city-service'\r\n\r\n\r\ninterface IHeaderProps {\r\n    isMobileMenu: boolean;\r\n    toggleMobileMenu: (action: boolean) => void\r\n}\r\n\r\nexport const Header = ({isMobileMenu, toggleMobileMenu}: IHeaderProps) => {\r\n\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth < 850 ? true : false)\r\n    const { currentCity } = useContext<IWeatherContext>(TodayWeatherContext)\r\n    const [isFavorite, setFavorite] = useState(false)\r\n\r\n    const updateState = () => {\r\n        const windowWidth = window.innerWidth\r\n\r\n        if(windowWidth < 850){\r\n            setIsMobile(true)\r\n        } else if(windowWidth > 850){\r\n            setIsMobile(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', updateState)\r\n\r\n        if(currentCity){\r\n            setFavorite(cityService.isCityFavorite(currentCity.Key))\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', updateState)\r\n        }\r\n    }, [currentCity])\r\n\r\n    const onToggleFavorite = () => {\r\n        if(currentCity){\r\n            cityService.toggleCityFavorite(currentCity)\r\n            setFavorite(prevState => !prevState)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-routing\">\r\n                {isMobile ? \r\n                <>\r\n                    <Link to='/'>\r\n                        <FaHome/>\r\n                    </Link>\r\n                    \r\n                    <Link to='/favorites'>\r\n                        <AiFillHeart/>\r\n                    </Link>\r\n                </>\r\n                :\r\n                <>\r\n                    <Link to='/'>\r\n                        <h2>WeatherApp</h2>\r\n                    </Link>\r\n                    <Link to='/favorites'>\r\n                        <h2>Favorites</h2>\r\n                    </Link>\r\n                </>\r\n                }\r\n            </div>\r\n            {isMobile ? \r\n                <GiHamburgerMenu className=\"mobile-hamburger-btn\" onClick={() => {toggleMobileMenu(!isMobileMenu)}} />\r\n            :\r\n                <div className=\"header-favorite-sate\">\r\n                    {isFavorite ? <AiFillHeart onClick={onToggleFavorite}/> : <AiOutlineHeart onClick={onToggleFavorite}/>}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ICityProps } from '../interfaces/ICity'\r\n\r\ninterface ICitiesProps {\r\n    cities: ICityProps[]\r\n    setCurrentCity: React.Dispatch<React.SetStateAction<ICityProps | null>>;\r\n    toggleMobileMenu: (action: boolean) => void;\r\n    clearSearch: () => void;\r\n}\r\n\r\nexport const SearchResults = ({ cities, setCurrentCity, toggleMobileMenu, clearSearch }: ICitiesProps) => {\r\n\r\n    const onCityClick = (city: ICityProps) => {\r\n        setCurrentCity(city)\r\n        toggleMobileMenu(false)\r\n        clearSearch()\r\n    }\r\n    \r\n    return (\r\n        <div className={`cities-list ${(cities && cities.length > 0) ? 'show' : ''}`}>\r\n            <ul>\r\n                {(cities && cities.length > 0) && cities.map(city => {\r\n                    return <li onClick={() => {onCityClick(city)}} key={`item-${city.Key}`} className=\"city-item\">{city.City}, {city.Country}</li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { ICityProps } from '../interfaces/ICity'\r\nimport { utilService } from '../services/util.service'\r\nimport { weatherService } from '../services/weather-service'\r\nimport { TodayWeatherContext, IWeatherContext } from '../components/context/TodayWeatherContext'\r\nimport { AiFillHeart, AiOutlineHeart } from 'react-icons/ai'\r\nimport { cityService } from '../services/city-service'\r\n\r\n\r\nexport const TodayWeather = ({ city }: { city: ICityProps | null }) => {\r\n\r\n    const { todayWeather, setTodayWeather } = useContext<IWeatherContext>(TodayWeatherContext)\r\n    const [ isFavorite, setFavorite ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const getCurrentWeather = async (cityKey: string) => {\r\n            const currentWeather = await weatherService.getCurrentWeather(cityKey)\r\n            setTodayWeather(currentWeather)\r\n        }\r\n        if (city) {\r\n            getCurrentWeather(city.Key)\r\n            setFavorite(cityService.isCityFavorite(city.Key))\r\n        }\r\n    }, [city, setTodayWeather])\r\n\r\n    const onToggleFavorite = () => {\r\n        if(city){\r\n            cityService.toggleCityFavorite(city)\r\n            setFavorite(prevState => !prevState)\r\n        }\r\n    }\r\n\r\n    if (!city || !todayWeather) return null\r\n\r\n    return (\r\n        <div className=\"todays-weather\">\r\n            <div className=\"city-favorite-state\">\r\n                {isFavorite ? \r\n                    <AiFillHeart onClick={onToggleFavorite}/>\r\n                :\r\n                    <AiOutlineHeart onClick={onToggleFavorite}/>\r\n                }\r\n            </div>\r\n            <div className=\"temp-display\">\r\n                {todayWeather.Temperature.Metric.Value.toFixed(0)}°\r\n            </div>\r\n            <div className=\"city-and-time\">\r\n                <div className=\"city-name\">\r\n                    {city.City}\r\n                </div>\r\n                <div className=\"city-time\">\r\n                    {utilService.getTime(todayWeather.LocalObservationDateTime)}\r\n                </div>\r\n            </div>\r\n            <div className=\"weather-preview\">\r\n                <img src={`https://www.accuweather.com/images/weathericons/${todayWeather.WeatherIcon}.svg`} alt={todayWeather.WeatherText} />\r\n                <p>{todayWeather.WeatherText}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","interface IScreenProps {\r\n    isOpen: boolean;\r\n    exitScreen: (action: boolean) => void;\r\n}\r\n\r\nexport const Screen = ({ isOpen, exitScreen }: IScreenProps) => {\r\n\r\n    return (\r\n        <div\r\n            onClick={() => {\r\n                exitScreen(false)\r\n            }}\r\n            className={`screen ${isOpen ? \"screen-active\" : \"\"}`}\r\n        ></div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { CitySearch } from '../components/CitySearch'\r\nimport { FiveDayForecast } from '../components/FiveDayForecast'\r\nimport { Header } from '../components/Header'\r\nimport { SearchResults } from '../components/SearchResults'\r\nimport { TodayWeather } from '../components/TodayWeather'\r\nimport { cityService } from '../services/city-service'\r\nimport { TodayWeatherContext } from '../components/context/TodayWeatherContext' \r\nimport { Screen } from '../components/Screen'\r\nimport { useParams } from 'react-router'\r\nimport { ICityProps } from '../interfaces/ICity'\r\nimport { ICurrentWeatherProps } from '../interfaces/IWeather'\r\n\r\ninterface ICityKeyParams {\r\n    citykey: string\r\n}\r\n\r\nexport const WeatherApp = () => {\r\n\r\n    const [cities, setCities] = useState<ICityProps[]>([])\r\n    const [currentCity, setCurrentCity] = useState<ICityProps | null>(null)\r\n    const [todayWeather, setTodayWeather] = useState<ICurrentWeatherProps | null>(null)\r\n    const [isMobileMenu, setMobileMenu] = useState(false)\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const cityKey: ICityKeyParams = useParams()\r\n\r\n    useEffect(() => {\r\n      // Get user's current location (lat,lng) => get user's current city by Api\r\n      // If device/browser doesn't support geolocation, get default location (tel aviv)\r\n      const getUserCoords = () => {\r\n        navigator.geolocation.getCurrentPosition( async (geoLocation) => {\r\n          const userCoords = {\r\n            lat: geoLocation.coords.latitude,\r\n            lng: geoLocation.coords.longitude\r\n          }\r\n\r\n          const city = await cityService.getCityByGeolocation(userCoords)\r\n          setCurrentCity(city)\r\n        }, async () => {\r\n          const city = await cityService.getCityByGeolocation()\r\n          setCurrentCity(city)\r\n        })\r\n\r\n      }\r\n\r\n      const getCurrentWeather = async () => {\r\n        const currentCity = await cityService.getCityByKey(cityKey.citykey)\r\n        setCurrentCity(currentCity)\r\n      }\r\n      \r\n      if(!cityKey || Object.keys(cityKey).length === 0){\r\n        getUserCoords()\r\n      } else{\r\n        getCurrentWeather()\r\n      }\r\n\r\n    }, [])\r\n\r\n    const getCities = async (searchTxt: string) => {\r\n        const cities = await cityService.getCitiesNames(searchTxt)\r\n        setCities(cities)\r\n    }\r\n\r\n    const onSetCitySearch = (searchTxt: string) => {\r\n        getCities(searchTxt)\r\n    }\r\n\r\n    const toggleMobileMenu = (action: boolean) => {\r\n        setMobileMenu(action)\r\n    }\r\n\r\n    const clearSearch = () => {\r\n      setCities([])\r\n      if(inputRef.current){\r\n        inputRef.current.value = ''\r\n      }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"app\">\r\n            <TodayWeatherContext.Provider value={{todayWeather, setTodayWeather, currentCity}}>\r\n              <div className=\"main-app\">\r\n                  <Header isMobileMenu={isMobileMenu} toggleMobileMenu={toggleMobileMenu}/>\r\n                  <div className=\"weather-details-zone\">\r\n                      <TodayWeather city={currentCity} />\r\n                      <FiveDayForecast city={currentCity}  />\r\n                  </div>\r\n              </div>\r\n              <div className={`search-details-zone ${isMobileMenu ? 'show-menu' : ''}`}>\r\n                  <CitySearch inputRef={inputRef} onSetCitySearch={onSetCitySearch}/>\r\n                  <SearchResults cities={cities} setCurrentCity={setCurrentCity} toggleMobileMenu={toggleMobileMenu} clearSearch={clearSearch}/>\r\n              </div>\r\n            </TodayWeatherContext.Provider>\r\n          </div>\r\n          <Screen isOpen={isMobileMenu} exitScreen={toggleMobileMenu}/>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\nimport { HashRouter } from 'react-router-dom'\nimport { Route, Switch } from 'react-router'\nimport { Favorites } from './pages/Favorites';\nimport { WeatherApp } from './pages/WeatherApp';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path = '/favorites' component={Favorites}/>\n        <Route path = '/city/:citykey' component={WeatherApp}/>\n        <Route exact path = '/' component={WeatherApp}/>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/style.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}